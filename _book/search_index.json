[
["index.html", "Light-level geolocation analysis Preface", " Light-level geolocation analysis Simeon Lisovski, Martins Briedis, Kiran Danjahl-Adams, Lykke Pedersen, Sarah Davidson, …, Michael T. Hallworth, Michael Sumner, Simon Wotherspoon, Eli Bridge (201X) The Nuts and Bolts of Light-Level Geolocation Analyses. Journal X:xxx-xxx. DOI:00000.00 Preface Geolocation by light is a method of animal tracking that uses small, light-detecting data loggers (i.e. geolocators) to determine the locations of animals based on the light environment they move through. Technological and fieldwork issues aside, effective use of light level geolocation requires translation of a time series of light levels into geographical locations. Geographical locations derived from light-level data are subject to error that derives directly from noise in the light-level data, i.e. unpredictable shading of the light sensor due to weather or the habitat (Lisovski et al. 2012). Although light-level geolocation has provided a wealth of new insights into the annual movements of hundreds of bird species, researchers invariably struggle with the analytical steps needed to obtain location estimates, interpret them, present their results, and document what they have done. This manual has been written by some of the leading experts in geolocator analysis and is based on material created to run multiple international workshops. Thus, it pools code and experience gathered over the last decade. We hope that this collection of analysis using different open source software tools (R packages) helps both, newcomers and experienced users of light-level geolocation. References "],
["sturcture-of-the-manual.html", "Sturcture of the manual", " Sturcture of the manual This manual should allow users with very limited knowledge in R coding to perform a state-of-the-art analysis of geolocator data. Thus, we start with the very basics of loading packges 1 and data 3 and go into more detail along the way. Starting with twiligth annotation 4 we go into the different packages, illustrate the general workflow using example data and discuss potential pitfalls and provide some recommendations. While there are more R packages available (see: Merkel et al. 2016), we focus on the most freuqently used tools such as GeoLight 5, probGLS 6, SGAT 7 and FLightR 8. Furthermore, we provide code and ideas on simple representation of the results 9 and discuss Movebank as a data repository for geolocator tracks 10, References "],
["acknowledgements.html", "Acknowledgements", " Acknowledgements We want ot acknowledge … please add. Swiss National Science Foundation &amp; Swiss Ornithological Insitute: Workshop at Rigi NCEAS: Workshop Santa Barbara Migrate Technology: Support for workshops "],
["start.html", "Chapter 1 Getting started", " Chapter 1 Getting started To analyse light-level geolocator data in R we need a couple of R packages as well as functions that allow to run our code. We created a package called GeoLocTools that contains functions that are not nessesarily associated to a certain package put are used in this manual. Importantly the package can also runs a check on you system (function: setupGeolocation()), detecting packages that are already on your computer and installs the missing tools directly from CRAN or GitHub. The package requires devtools (install if nessesary using the install.packages() function). With devtools on your system, you are able to download and built as well as install R packages directly from GitHub (e.g. GeoLocTools). library(devtools) install_github(&quot;SLisovski/GeoLocTools&quot;) You are know able to load the package and run the setupGeolocation() function. We recommend to include this line at the beginning of each script you create for a geolocator analysis. Also check (every know and then), if there is a new version of GeoLicTools available. And if that is the case re-install the package using the same code you used for initial installation. library(GeoLocTools) setupGeolocation() if you see “You are all set!” in your console, the function ran succesfully and you are able to proceed. Amongst other dependencies, the following packages are loaded by this function: CRAN: geosphere, maptols, raster, MASS, rgdal GitHub: twGeos, GeoLight, probGLS, SGAT, FLightR "],
["datasets.html", "Chapter 2 The Datasets", " Chapter 2 The Datasets To illustrate the capabilities of the different packages, discuss the potential pitfalls and provide some recommendations, we will use raw geolocator data from three individuals of different species. The data is publised on Movebank @ref{movebank} and can be downloaded directly using the R package move (to be done and to be tested!). TagID Species Tag type Movebank information M034 Red-backed Shrike Integio (Movement Technology Ltd.) TBA xxx European bee-eater PAM (Swiss Ornithological Institute) TAB xxx xx Bunting Eli TAB Differences Recording/measurement frequency Sensitivity "],
["loadingData.html", "Chapter 3 Loading data into R", " Chapter 3 Loading data into R here are a few functions to read light-level data from different tag types into R. The type of file that you have will determine which function you use. If you have .lig from British Antarctic Survey or BioTrack you use the readLig found in the TwGeos package. For the GeoLight and the SGAT analyses we will use a tag developed by the Swiss Ornithological Institute that was deployed on a Bee-eather in 2014/2015. For the FLightR analysis we will use recordings from an Integio logger developped by Migrate Technology Ltd that was deployed on a … ID &lt;- &quot;14SA&quot; wd &lt;- &quot;Main&quot; Species &lt;- &quot;MerApi&quot; AnalCode &lt;- &quot;R1&quot; lon.calib &lt;- 11.96 lat.calib &lt;- 51.32 raw &lt;- glfTrans(paste0(&quot;Data/RawData/&quot;, Species, &quot;/&quot;, ID, &quot;.glf&quot;)) names(raw) &lt;- c(&quot;Date&quot;, &quot;Light&quot;) raw$Light &lt;- log(raw$Light+0.0001) + abs(min(log(raw$Light+0.0001))) head(raw) ## Date Light ## 1 2015-07-10 00:00:00 0 ## 2 2015-07-10 00:05:00 0 ## 3 2015-07-10 00:10:00 0 ## 4 2015-07-10 00:15:00 0 ## 5 2015-07-10 00:20:00 0 ## 6 2015-07-10 00:25:00 0 No matter how the data is read in and what tag type has been used the output needs to have at least two columns (note that names can be slightly different): datetime light and these columns need to be in a specific format with datetime beeing a POSIX. class and light beeing numeric intergers. str(raw) ## &#39;data.frame&#39;: 112161 obs. of 2 variables: ## $ Date : POSIXct, format: &quot;2015-07-10 00:00:00&quot; &quot;2015-07-10 00:05:00&quot; ... ## $ Light: num 0 0 0 0 0 0 0 0 0 0 ... also note, that some ligth values should be log-transformed while some data is already on a log scale (e.g. .lig files). "],
["twilight.html", "Chapter 4 Twilight Annotation", " Chapter 4 Twilight Annotation There are a few options for how to define / edit twilights. All three of the analysis packages described here (GeoLight, SGAT, and FLightR) require as one of their inputs a dataframe containing the times of sunrise and sunset (henceforth twilights) for the duration of the study period. The twilight times are estimated based on a light-level threshold, which is the light value that seperates day from night - values above the threshold indicate the sun has risen and values below the threshold value indicate the sun has set. There are a few options for how to generate the twilight data. twilightCalc is one function that allows transitions to be defined and is part of the GeoLight package. Another function that is easier to use and more interactive (and thus preffered) is called preprocessLight from the TwGeospackage. Both require a threshold value be specified to define the transition events. How do I know which thresold to use? You should choose the lowest value that is consistently above any noise in the nighttime light levels. For many .lig data sets 2.5 is above any nighttime noise. For forest interior, ground dwelling species a lower threshold may be helpful - especially if there isn’t much ‘noise’ during the night. A threshold of 1 may be appropriate for such species. It is usually a good idea to plot (parts) the data and see how the threshold fits into the light recordings: threshold &lt;- 2.5 par(mfrow = c(1, 1), mar = c(2, 2, 2, 2) ) with(raw[2000:5000,], plot(Date, Light, type = &quot;o&quot;, pch = 16, cex = 0.5)) abline(h=threshold, col=&quot;orange&quot;, lty = 2, lwd = 2) Another useful plot can be created using lightImage; In the resulting figure, each day is represented by a thin horizontal line that plots the light values as grayscale pixels (dark = low light and white = maximum light) in order from bottom to top. a light image allows you to visualize an entire data set at once, and easily spot discrepancies in light to dark transitions. If you define addDeploymentLine = TRUE the sunrise and sunset lines for the calibration site are added to the plot. This allows you to see when the birds were likely at the deployment site. offset &lt;- 12 # adjusts the y-axis to put night (dark shades) in the middle lightImage( tagdata = raw, # light data offset = offset, zlim = c(0, 20)) # y axis In the next step, we want to define daily sunrise and sunset times. preprocessLight is an interactive function for editing light data and deriving these twilight times Note: if you are working on a Mac you must install Quartz first (https://www.xquartz.org) and then set gr.Device to “x11” in the function. If you are working with a virtual machine, the function may not work at all. Detailed instructions of how to complete the interactive process can be found by running the following code: ?preprocessLight Below, we explain the major functionalities. When you run, twl &lt;- preprocessLight(raw, threshold = threshold, offset = offset, lmax = 20, # light range gr.Device = &quot;x11&quot;) # x11 works on a mac (if Quarz has been installed and works on most Windows machines too) two windows will appear. Move them so they are not on top of each other and you can see both. They should look like a big black blob (Kiran`s expression). This identifies the “nightime” period over time. The top of the blob shows all the sunrises and the bottom of blob shows all the sunsets. You can note for instance that the days get longer at the beggining of the time series, because the blob gets wider. Step 1. Click on the window entitled “select subset” with the left mouse button to choose start and right mouse button to choose end. You will notice that the red bar at the top moves and that the second window zooms into that time period. Select when you want your time series to start and end. This allows you to ignore for instance periods of nesting. Once you are happy with the start and end of the timeseries press “a” on the keyboard to accept and move to next step. Step 2. click on the window entitled “Find twilights” and the second window will zoom in. All you need to do here is click in the dark part of the image and this will identify all the sunrises (orange) and sunsets (blue) based on the threshold defined in the presvious section. Press “a” on the keyboard to accept and move to next step. Step 3. This step is for adding or deleting points.You can often skip it by pressing “a” on the keyboard. However, if you do want to add a point, you can click on the “Insert twilights” window to zoom in and then left click on the other window with the left mouse button to add a sunrise, and the right button to add a sunset some. You can use “u” on the keyboard to undo any changes, and “d” to delete any points which are extra. Press “a” to move to next step. Step 4. This allows you to find points which have been miss-classified (often because the bird was in the shade or in a burrow) and to move the respective sunrise. Choose a point by clicking on it in the “edit twilights” window and the other window will displaz the sunrise (or sunsets) from the presvious and next days (purple and green) relative to the current sunrise or sunset. Thus if it is very much out, you can estimate the sunset on that day would likely have been sometime between that of the day before and after. You can then left click at the point where you want the day to start and press “a” to accept and move the sunrise or sunset. You will notice the red line then moves. Do this for as many points as necessary. Then close the windows with “q”. IMPORTANT We want to save the output file so that we never have to do this step again. The output can be saved as a .csv file that can then easily be read into R at a later time. The output contains the following importnatn information: Twilight The date and time of the sunrise/sunset events Rise whether the Twilight is a sunrise (TRUE) or a sunset (FALSE) Deleted whether you marked this twilight with a “d”, that means it is still in the file and can/should be exlcuded later on. Marker see detailed description in ?preprocessLight Inserted whether this Twilight was manually inserted Twilight3 the original Twilight. Only different to Twilight if you edited the timing Other processes like twilightCalc produce different outputs but it is preferred to get them into this format (at least with the columns Twilightand Rise), since you can go ahead with any analysis youj want using this twiligth file. To save this file we use the metadata variables that were defined above: write.csv(twl, paste0(&quot;Data/Results/&quot;, Species, &quot;/&quot;, ID, &quot;_&quot;, AnalCode, &quot;_twl.csv&quot;), row.names = F) This can later be loaded using the following code: twl &lt;- read.csv(paste0(&quot;Data/Results/&quot;, Species, &quot;/&quot;, ID, &quot;_&quot;, AnalCode, &quot;_twl.csv&quot;)) twl$Twilight &lt;- as.POSIXct(twl$Twilight, tz = &quot;GMT&quot;) # get the Twilight times back into the POSIX. class format The result of this first part that is independent* of which package/analysis will be used next is the twiligth file that shoudl at least look like (can have more columns): head(twl[,c(1,2)]) ## Twilight Rise ## 1 2015-07-15 19:34:02 FALSE ## 2 2015-07-16 03:01:00 TRUE ## 3 2015-07-16 19:43:53 FALSE ## 4 2015-07-17 02:51:06 TRUE ## 5 2015-07-17 19:48:53 FALSE ## 6 2015-07-18 02:46:06 TRUE "],
["GeoLight.html", "Chapter 5 GeoLight", " Chapter 5 GeoLight "],
["probGLS.html", "Chapter 6 probGLS", " Chapter 6 probGLS "],
["SGAT.html", "Chapter 7 SGAT", " Chapter 7 SGAT "],
["FLightR.html", "Chapter 8 FLightR", " Chapter 8 FLightR "],
["presentation.html", "Chapter 9 Presentation of results", " Chapter 9 Presentation of results "],
["movebank.html", "Chapter 10 Movemebank", " Chapter 10 Movemebank "],
["references.html", "References", " References "]
]
